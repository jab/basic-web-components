{
  "_args": [
    [
      "webcomponents.js@https://registry.npmjs.org/webcomponents.js/-/webcomponents.js-0.7.20.tgz",
      "/Developer/Source/basic-web-components"
    ]
  ],
  "_from": "webcomponents.js@>=0.7.2 <0.8.0",
  "_id": "webcomponents.js@0.7.20",
  "_inCache": true,
  "_location": "/webcomponents.js",
  "_phantomChildren": {},
  "_requested": {
    "name": "webcomponents.js",
    "raw": "webcomponents.js@https://registry.npmjs.org/webcomponents.js/-/webcomponents.js-0.7.20.tgz",
    "rawSpec": "https://registry.npmjs.org/webcomponents.js/-/webcomponents.js-0.7.20.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/webcomponents.js/-/webcomponents.js-0.7.20.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/webcomponents.js/-/webcomponents.js-0.7.20.tgz",
  "_shasum": "36727218fbf59433ae10139e59eaf3cfdddc11c5",
  "_shrinkwrap": null,
  "_spec": "webcomponents.js@https://registry.npmjs.org/webcomponents.js/-/webcomponents.js-0.7.20.tgz",
  "_where": "/Developer/Source/basic-web-components",
  "author": {
    "name": "The Polymer Authors"
  },
  "bugs": {
    "url": "https://github.com/webcomponents/webcomponentsjs/issues"
  },
  "dependencies": {},
  "description": "webcomponents.js",
  "devDependencies": {
    "gulp": "^3.8.8",
    "gulp-audit": "^1.0.0",
    "gulp-concat": "^2.4.1",
    "gulp-header": "^1.1.1",
    "gulp-uglify": "^1.0.1",
    "run-sequence": "^1.0.1",
    "web-component-tester": "^4.0.1"
  },
  "directories": {
    "test": "tests"
  },
  "homepage": "http://webcomponents.org",
  "license": "BSD-3-Clause",
  "main": "webcomponents.js",
  "name": "webcomponents.js",
  "optionalDependencies": {},
  "readme": "webcomponents.js\n================\n\n[![Join the chat at https://gitter.im/webcomponents/webcomponentsjs](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/webcomponents/webcomponentsjs?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nA suite of polyfills supporting the [Web Components](http://webcomponents.org) specs:\n\n**Custom Elements**: allows authors to define their own custom tags ([spec](https://w3c.github.io/webcomponents/spec/custom/)).\n\n**HTML Imports**: a way to include and reuse HTML documents via other HTML documents ([spec](https://w3c.github.io/webcomponents/spec/imports/)).\n\n**Shadow DOM**: provides encapsulation by hiding DOM subtrees under shadow roots ([spec](https://w3c.github.io/webcomponents/spec/shadow/)).\n\nThis also folds in polyfills for `MutationObserver` and `WeakMap`.\n\n\n## Releases\n\nPre-built (concatenated & minified) versions of the polyfills are maintained in the [tagged versions](https://github.com/webcomponents/webcomponentsjs/releases) of this repo. There are two variants:\n\n`webcomponents.js` includes all of the polyfills.\n\n`webcomponents-lite.js` includes all polyfills except for shadow DOM.\n\n\n## Browser Support\n\nOur polyfills are intended to work in the latest versions of evergreen browsers. See below\nfor our complete browser support matrix:\n\n| Polyfill   | IE10 | IE11+ | Chrome* | Firefox* | Safari 7+* | Chrome Android* | Mobile Safari* |\n| ---------- |:----:|:-----:|:-------:|:--------:|:----------:|:---------------:|:--------------:|\n| Custom Elements | ~ | ✓ | ✓ | ✓ | ✓ | ✓| ✓ |\n| HTML Imports | ~ | ✓ | ✓ | ✓ | ✓| ✓| ✓ |\n| Shadow DOM | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ | ✓ |\n| Templates | ✓ | ✓ | ✓ | ✓| ✓ | ✓ | ✓ |\n\n\n*Indicates the current version of the browser\n\n~Indicates support may be flaky. If using Custom Elements or HTML Imports with Shadow DOM,\nyou will get the non-flaky Mutation Observer polyfill that Shadow DOM includes.\n\nThe polyfills may work in older browsers, however require additional polyfills (such as classList)\nto be used. We cannot guarantee support for browsers outside of our compatibility matrix.\n\n\n### Manually Building\n\nIf you wish to build the polyfills yourself, you'll need `node` and `gulp` on your system:\n\n * install [node.js](http://nodejs.org/) using the instructions on their website\n * use `npm` to install [gulp.js](http://gulpjs.com/): `npm install -g gulp`\n\nNow you are ready to build the polyfills with:\n\n    # install dependencies\n    npm install\n    # build\n    gulp build\n\nThe builds will be placed into the `dist/` directory.\n\n## Contribute\n\nSee the [contributing guide](CONTRIBUTING.md)\n\n## License\n\nEverything in this repository is BSD style license unless otherwise specified.\n\nCopyright (c) 2015 The Polymer Authors. All rights reserved.\n\n## Helper utilities\n\n### `WebComponentsReady`\n\nUnder native HTML Imports, `<script>` tags in the main document block the loading of such imports. This is to ensure the imports have loaded and any registered elements in them have been upgraded. \n\nThe webcomponents.js and webcomponents-lite.js polyfills parse element definitions and handle their upgrade asynchronously. If prematurely fetching the element from the DOM before it has an opportunity to upgrade, you'll be working with an `HTMLUnknownElement`. \n\nFor these situations (or when you need an approximate replacement for the Polymer 0.5 `polymer-ready` behavior), you can use the `WebComponentsReady` event as a signal before interacting with the element. The criteria for this event to fire is all Custom Elements with definitions registered by the time HTML Imports available at load time have loaded have upgraded.\n\n```js\nwindow.addEventListener('WebComponentsReady', function(e) {\n  // imports are loaded and elements have been registered\n  console.log('Components are ready');\n});\n```\n\n## Known Issues\n\n  * [Custom element's constructor property is unreliable](#constructor)\n  * [Contenteditable elements do not trigger MutationObserver](#contentedit)\n  * [ShadowCSS: :host-context(...):host(...) doesn't work](#hostcontext)\n  * [execCommand isn't supported under Shadow DOM](#execcommand)\n\n### Custom element's constructor property is unreliable <a id=\"constructor\"></a>\nSee [#215](https://github.com/webcomponents/webcomponentsjs/issues/215) for background.\n\nIn Safari and IE, instances of Custom Elements have a `constructor` property of `HTMLUnknownElementConstructor` and `HTMLUnknownElement`, respectively. It's unsafe to rely on this property for checking element types.\n\nIt's worth noting that `customElement.__proto__.__proto__.constructor` is `HTMLElementPrototype` and that the prototype chain isn't modified by the polyfills(onto `ElementPrototype`, etc.)\n\n### Contenteditable elements do not trigger MutationObserver <a id=\"contentedit\"></a>\nUsing the MutationObserver polyfill, it isn't possible to monitor mutations of an element marked `contenteditable`.\nSee [the mailing list](https://groups.google.com/forum/#!msg/polymer-dev/LHdtRVXXVsA/v1sGoiTYWUkJ)\n\n### ShadowCSS: :host-context(...):host(...) doesn't work <a id=\"hostcontext\"></a>\nSee [#16](https://github.com/webcomponents/webcomponentsjs/issues/16) for background.\n\nUnder the shadow DOM polyfill, rules like:\n```\n:host-context(.foo):host(.bar) {...}\n```\ndon't work, despite working under native Shadow DOM. The solution is to use `polyfill-next-selector` like:\n\n```\npolyfill-next-selector { content: '.foo :host.bar, :host.foo.bar'; }\n```\n\n### execCommand and contenteditable isn't supported under Shadow DOM <a id=\"execcommand\"></a>\nSee [#212](https://github.com/webcomponents/webcomponentsjs/issues/212)\n\n`execCommand`, and `contenteditable` aren't supported under the ShadowDOM polyfill, with commands that insert or remove nodes being especially prone to failure.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/webcomponents/webcomponentsjs.git"
  },
  "scripts": {
    "test": "wct"
  },
  "version": "0.7.20"
}
